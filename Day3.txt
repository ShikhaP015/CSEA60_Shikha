1.int main()
{
    int *num=(int*)malloc(4*(sizeof(int)));
    int i;
    num[0]=1;
    num[1]=2;
    num[2]=3;
    printf("\nSorted integers are:");
    for(i=0;i<4;i++)
    printf("\nnum[%d]= %d",i,num[i]);
    return 0;
}
OUTPUT
num[0]= 1
num[1]= 2
num[2]= 3
num[3]= 4643

2.int main()
{
    char *ptr;
    ptr=(char*)malloc(10);
    strcpy(ptr,"Programming");
    printf("%s, Address=%u\n",ptr,ptr);

    ptr=(char*)realloc(ptr,20);  //ptr is reallocated with new size
    strcat(ptr," in C");
    printf("%s, Address=%u\n",ptr,ptr);
    free(ptr);
}
OUTPUT
Programming, Address=2038416
Programming in C, Address=2038416

3.int main()
{
    int n=10;
    int *p=malloc(n);
    if(p==NULL)
    {
        printf("Unable to allocate memory:(\n");
        return -1;
    }
    printf("Allocated %d bytes of memory\n",n);
    printf("%p\t%p\t%p",p,p+1,p+2);
    return 0;
}
OUTPUT
Allocated 10 bytes of memory
00B21A90        00B21A94        00B21A98

4.#include <stdio.h>
#include <stdlib.h>

struct node
{
    int num;                        //Data of the node
    struct node *nextptr;           //Address of the next node
}*stnode;

void createNodeList(int n); // function to create the list
void displayList();         // function to display the list

int main()
{
    int n;
    printf("How many Nodes : ");
    scanf("%d", &n);
    createNodeList(n);
    printf("\n Data entered in the list : \n");
    displayList();
    return 0;
}
void createNodeList(int n)
{
    struct node *fnNode, *tmp;
    int num, i;
    stnode = (struct node *)malloc(sizeof(struct node));

    if(stnode == NULL) //check whether the fnnode is NULL and if so no memory allocation
    {
        printf(" Memory can not be allocated.");
    }
    else
    {
// reads data for the node through keyboard

        printf(" Input data for node 1 : ");
        scanf("%d", &num);
        stnode->num = num;      
        stnode->nextptr = NULL; // links the address field to NULL
        tmp = stnode;
// Creating n nodes and adding to linked list
        for(i=2; i<=n; i++)
        {
            fnNode = (struct node *)malloc(sizeof(struct node));
            if(fnNode == NULL)
            {
                printf(" Memory can not be allocated.");
                break;
            }
            else
            {
                printf(" Input data for node %d : ", i);
                scanf(" %d", &num);
 
                fnNode->num = num;      // links the num field of fnNode with num
                fnNode->nextptr = NULL; // links the address field of fnNode with NULL
 
                tmp->nextptr = fnNode; // links previous node i.e. tmp to the fnNode
                tmp = tmp->nextptr;
            }
        }
    }
}
void displayList()
{
    struct node *tmp;
    if(stnode == NULL)
    {
        printf(" List is empty.");
    }
    else
    {
        tmp = stnode;
        while(tmp != NULL)
        {
            printf(" Data = %d\n", tmp->num);       // prints the data of current node
            tmp = tmp->nextptr;                     // advances the position of current node
        }
    }
}
OUTPUT
How many Nodes : 3
 Input data for node 1 : 10
 Input data for node 2 : 20
 Input data for node 3 : 30

 Data entered in the list :
 Data = 10
 Data = 20
 Data = 30